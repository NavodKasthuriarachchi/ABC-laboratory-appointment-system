(function($, window, document, undefined) {
    // Define ScrollSpy class
    class ScrollSpy {
        constructor(element, options) {
            // Default options
            this.defaults = {
                namespace: "scrollspy",
                activeClass: "active",
                animate: false,
                duration: 1000,
                offset: 0,
                container: window,
                replaceState: false
            };

            // Merge default options with user-defined options
            this.options = Object.assign({}, this.defaults, options);

            // Cache the element and its child links
            this.element = $(element);
            this.links = this.element.find("a");

            // Initialize scroll spy
            this.init();
        }

        // Initialize the scroll spy
        init() {
            // Attach click event handler to links
            this.links.on("click", this.handleClick.bind(this));

            // Reset classes initially
            this.resetClasses();

            // Bind scroll event to container
            $(this.options.container).on("scroll." + this.options.namespace, this.trackChanged.bind(this));

            // Call trackChanged on document ready
            $(document).ready(this.trackChanged.bind(this));
        }

        // Handle click event on links
        handleClick(event) {
            let target = $(event.currentTarget).attr("href");
            let $target = $(target);
            
            if ($target.length > 0) {
                let top = $target.offset().top + this.options.offset;
                
                // Scroll to target
                if (this.options.animate) {
                    $("html, body").animate({ scrollTop: top }, this.options.duration);
                } else {
                    window.scrollTo(0, top);
                }

                event.preventDefault();
            }
        }

        // Find elements to track
        findElements() {
            let elements = [];

            this.links.each((index, link) => {
                let hash = $(link).attr("href");
                let element = $(hash);

                if (element.length > 0) {
                    let top = Math.floor(element.offset().top);
                    let bottom = top + Math.floor(element.outerHeight());
                    elements.push({ element, hash, top, bottom });
                }
            });

            return elements;
        }

        // Find link based on hash
        findLink(hash) {
            return this.links.filter(`[href="${hash}"]`);
        }

        // Reset classes
        resetClasses() {
            this.links.parent().removeClass(this.options.activeClass);
        }

        // Track scroll changes
        trackChanged() {
            let elements = this.findElements();
            let position = {
                top: $(this.options.container).scrollTop() + Math.abs(this.options.offset),
                left: $(this.options.container).scrollLeft()
            };
            let link = null;

            for (let i = 0; i < elements.length; i++) {
                let current = elements[i];

                if (position.top >= current.top && position.top < current.bottom) {
                    let hash = current.hash;
                    link = this.findLink(hash);

                    if (link.length > 0) {
                        if (this.options.replaceState) {
                            history.replaceState({}, "", `/${hash}`);
                        }

                        this.resetClasses();
                        link.parent().addClass(this.options.activeClass);

                        if (this.options.onChange) {
                            this.options.onChange(current.element, this.element, position);
                        }

                        break;
                    }
                }
            }

            if (!link && this.scrollArea !== "exit" && this.options.onExit) {
                this.options.onExit(this.element, position);
                this.resetClasses();
                this.scrollArea = "exit";

                if (this.options.replaceState) {
                    history.replaceState({}, "", "/");
                }
            }
        }
    }

    // Extend jQuery with ScrollSpy plugin
    $.fn.extend({
        scrollspy: function(options) {
            return this.each(function() {
                new ScrollSpy(this, options);
            });
        }
    });

})(jQuery, window, document);
